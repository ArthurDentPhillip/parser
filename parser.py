# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
from concurrent.futures import ProcessPoolExecutor

# üëá –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏ –µ—â–µ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è main –∫–æ—Ç–æ—Ä–∞—è –µ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç)


def run_task(args):
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–µ main
    from_city, to_city, mode, dimensions = args
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.keys import Keys
    from webdriver_manager.chrome import ChromeDriverManager
    import time
    import json
    import os
    from concurrent.futures import ProcessPoolExecutor
    import atexit

    RESULTS_FILE = "delivery_results.json"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--no-sandbox")
    options.add_argument("--start-maximized")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    driver = webdriver.Chrome(service=Service(
        ChromeDriverManager().install()), options=options)
    # –ë—É–¥–µ—Ç –∂–¥–∞—Ç—å 20 —Å–µ–∫ –¥–æ –ø–æ—è–≤–ª—è–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    wait = WebDriverWait(driver, 20)

    def reset_calculator():
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        driver.get("https://calculator-dostavki.ru/")
        # –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫ —á—Ç–æ–±—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä—É–∑–∏–ª–∏—Å—å
        time.sleep(3)
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫, –∞ –≤–Ω—É—Ç—Ä—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –∫—É–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            cookie_btn = wait.until(EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "button.cookie-btn")))
            cookie_btn.click()
        except:
            pass

    # –ü–æ–ª—É—á–∞–µ—Ç –¥–≤–∞ —á–µ–∫–±–æ–∫—Å–∞ –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è –∫–ª–∏–∫–∞–µ—Ç –Ω–∞ –Ω–∏—Ö
    def set_delivery_mode(mode):
        warehouse = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "input[name='mode[0]']")))
        door = driver.find_element(By.CSS_SELECTOR, "input[name='mode[3]']")
        if mode == "—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥":
            if not warehouse.is_selected():
                warehouse.click()
            if door.is_selected():
                door.click()
        elif mode == "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å":
            if not door.is_selected():
                door.click()
            if warehouse.is_selected():
                warehouse.click()

    # –ü–æ–ª—É—á–∞–µ—Ç id –ø–æ–ª—è –≤–≤–æ–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    def fill_city(field_id, city_name):
        # –ñ–¥–µ—Ç –ø–æ–∫–∞ –ø–æ–ª–µ —Å—Ç–∞–Ω–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º –∏ –æ—á–∏—â–∞–µ—Ç –µ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥
        field = wait.until(EC.element_to_be_clickable((By.ID, field_id)))
        field.clear()
        # –î–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        for char in city_name:
            # –í–≤–æ–¥–∏—Ç –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ –ø–æ–ª–µ
            field.send_keys(char)
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —Å–∏–º–≤–æ–ª–∞
            time.sleep(0.1)
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞
        time.sleep(2)
        # –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤–Ω–∏–∑ —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
        field.send_keys(Keys.ARROW_DOWN)
        # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
        time.sleep(0.5)
        # –í–≤–æ–¥ enter –≤ –ø–æ–ª–µ
        field.send_keys(Keys.ENTER)

    # –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –∏ –∏—â–µ—Ç –∏—Ö, –∞ –ø–æ—Ç–æ–º –≤–±–∏–≤–∞–µ—Ç —Ç—É–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ
    def fill_dimensions(dimensions):
        for name, value in dimensions.items():
            field = wait.until(EC.element_to_be_clickable((By.NAME, name)))
            field.clear()
            field.send_keys(str(value))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    def get_results():
        # –ñ–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–µ—Ç–æ–¥ presence...–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞)
        # wait - –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω –≤ —Å–∞–º–æ–º –≤–µ—Ä—Ö—É –∏ –∑–¥–µ—Å—å –µ–≥–æ –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –∂–¥–µ—Ç –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —É—Å–ª–æ–≤–∏–µ
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".scroll-table table")))
        time.sleep(2)
        # –ò—â—É—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        rows = driver.find_elements(
            By.CSS_SELECTOR, ".scroll-table table tbody tr")
        results = []
        # –ü–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        for row in rows:
            # –ò—â—É—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–¥
            cells = row.find_elements(By.TAG_NAME, "td")
            # 3 —Ç–∞–∫–∏—Ö —è—á–µ–π–∫–∏ –¥–æ–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å
            if len(cells) == 3:
                # –ï—Å–ª–∏ –≤ –Ω–∏—Ö –∑–∞–ø–∏—Å–Ω–æ —ç—Ç–æ, –∏—Ö –Ω–∞–¥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
                if "—Ü–µ–Ω–∞" in cells[0].text.lower() or "–∫–æ–º–ø–∞–Ω–∏—è" in cells[2].text.lower():
                    continue
                # –ü–æ–ª—É—á–∞–µ—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –º–∞—Å—Å–∏–≤
                try:
                    price = cells[0].text.strip()
                    delivery = ' '.join(cells[1].text.strip().split())
                    try:
                        company_img = cells[2].find_element(By.TAG_NAME, "img")
                        company = company_img.get_attribute("alt").strip()
                    except:
                        company = cells[2].text.strip().split("\n")[0]
                    try:
                        tariff = cells[2].find_element(
                            By.CLASS_NAME, "mdl").text.strip()
                    except:
                        tariff = ""
                    results.append({
                        "company": company,
                        "tariff": tariff,
                        "price": price,
                        "delivery": delivery
                    })
                except:
                    continue
        # –í–æ–∑–≤—Ä–∞–∑–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        return results
    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª

    # def append_result_to_file(result):
    #     lockfile = "delivery_results.lock"
    #     while os.path.exists(lockfile):
    #         time.sleep(0.1)
    #     open(lockfile, "w").close()
    #     # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª json –∏ —á–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ, –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π json
    #     if os.path.exists(RESULTS_FILE):
    #         with open(RESULTS_FILE, "r", encoding="utf-8") as f:
    #             try:
    #                 data = json.load(f)
    #             except:
    #                 data = []
    #     else:
    #         data = []
    #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ data
    #     data.append(result)
    #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ö –≤ —Ñ–∞–π–ª
    #     with open(RESULTS_FILE, "w", encoding="utf-8") as f:
    #         json.dump(data, f, ensure_ascii=False, indent=2)
    #     # –ó–∞–∫—Ä—ã—Ç–∏–µ –ª–æ–∫—Ñ–∞–π–ª–∞
    #     os.remove(lockfile)
    def append_result_to_file(result):
        lockfile = "delivery_results.lock"
        max_attempts = 5
        attempt = 0

        while attempt < max_attempts:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lock-—Ñ–∞–π–ª–∞
                with open(lockfile, 'x') as f:
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    f.write(str(os.getpid()))

                try:
                    # –ß—Ç–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    if os.path.exists(RESULTS_FILE):
                        try:
                            with open(RESULTS_FILE, "r", encoding="utf-8") as f:
                                data = json.load(f)
                        except (json.JSONDecodeError, IOError) as e:
                            print(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                            data = []
                    else:
                        data = []

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    data.append(result)

                    # –ó–∞–ø–∏—Å—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
                    temp_file = RESULTS_FILE + ".tmp"
                    with open(temp_file, "w", encoding="utf-8") as f:
                        json.dump(data, f, ensure_ascii=False, indent=2)

                    # –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞
                    os.replace(temp_file, RESULTS_FILE)

                    return True  # –£—Å–ø–µ—à–Ω–∞—è –∑–∞–ø–∏—Å—å

                finally:
                    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞
                    if os.path.exists(lockfile):
                        os.remove(lockfile)

            except FileExistsError:
                # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                time.sleep(0.5 * (attempt + 1))
                attempt += 1
                print(
                    f"‚åõ –û–∂–∏–¥–∞–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts})")

            except Exception as e:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                if os.path.exists(lockfile):
                    try:
                        os.remove(lockfile)
                    except:
                        pass
                return False

        print("‚ö† –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        return False

    # def append_result_to_file(result):
    #     lockfile = "delivery_results.lock"
    # try:
    #     # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è lock-—Ñ–∞–π–ª–∞ + —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö
    #     while os.path.exists(lockfile):
    #         if time.time() - os.path.getmtime(lockfile) > 300:  # 5 –º–∏–Ω—É—Ç
    #             os.remove(lockfile)
    #         time.sleep(0.1)

    #     # –°–æ–∑–¥–∞–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ —Å PID
    #     with open(lockfile, "w") as f:
    #         f.write(str(os.getpid()))

    #     # –£–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #     atexit.register(lambda: os.remove(lockfile)
    #                     if os.path.exists(lockfile) else None)

    #     # –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    #     if os.path.exists(RESULTS_FILE):
    #         try:
    #             with open(RESULTS_FILE, "r", encoding="utf-8") as f:
    #                 data = json.load(f)
    #         except (json.JSONDecodeError, IOError):
    #             data = []
    #     else:
    #         data = []

    #     data.append(result)

    #     with open(RESULTS_FILE, "w", encoding="utf-8") as f:
    #         json.dump(data, f, ensure_ascii=False, indent=2)

    # finally:
    #     # –£–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    #     if os.path.exists(lockfile):
    #         os.remove(lockfile)
    # def append_result_to_file(result):
    #     lockfile = "delivery_results.lock"
    #     try:
    #         # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è lock-—Ñ–∞–π–ª–∞ + —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å—à–∏—Ö
    #         while os.path.exists(lockfile):
    #             if time.time() - os.path.getmtime(lockfile) > 300:  # 5 –º–∏–Ω—É—Ç
    #                 os.remove(lockfile)
    #         time.sleep(0.1)

    #         # –°–æ–∑–¥–∞–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ —Å PID
    #         with open(lockfile, "w") as f:
    #             f.write(str(os.getpid()))

    #         # –£–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    #         atexit.register(lambda: os.remove(lockfile)
    #                         if os.path.exists(lockfile) else None)

    #         # –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    #         if os.path.exists(RESULTS_FILE):
    #             try:
    #                 with open(RESULTS_FILE, "r", encoding="utf-8") as f:
    #                     data = json.load(f)
    #             except (json.JSONDecodeError, IOError):
    #                 data = []
    #         else:
    #             data = []

    #         data.append(result)

    #         with open(RESULTS_FILE, "w", encoding="utf-8") as f:
    #             json.dump(data, f, ensure_ascii=False, indent=2)

    #     finally:
    #         # –£–¥–∞–ª–µ–Ω–∏–µ lock-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    #         if os.path.exists(lockfile):
    #             os.remove(lockfile)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ñ—É–Ω–∫—Ü–∏–∏ run task
    # key = (from_city, to_city, mode)
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"‚û° {from_city} ‚Üí {to_city} | {mode}")
    try:
        # –°–∫—Ä—ã–≤–∞–µ—Ç –∫—É–∫–∏ –∫–Ω–æ–ø–∫–æ–π
        reset_calculator()
        # –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é–¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
        set_delivery_mode(mode)
        # –í–±–∏–≤–∞—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤ –∏ –≥–∞–±–∞—Ä–∏—Ç—ã
        fill_city("city1", from_city)
        fill_city("city2", to_city)
        fill_dimensions({
            "weight[]": dimensions[0],
            "length[]": dimensions[1],
            "width[]": dimensions[2],
            "height[]": dimensions[3],
        })
        # –ù–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        submit_btn = wait.until(EC.element_to_be_clickable(
            (By.CSS_SELECTOR, "button[type='submit']")))
        submit_btn.click()
        print(f"‚åõ {from_city} ‚Üí {to_city} | –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        time.sleep(5)
        # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = get_results()
        if results:
            for res in results:
                full = {
                    "from": from_city,
                    "to": to_city,
                    "mode": mode,
                    "weight": dimensions[0],
                    "length": dimensions[1],
                    "width": dimensions[2],
                    "height": dimensions[3],
                    **res
                }
                # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
                append_result_to_file(full)
                print(
                    f"‚úÖ {res['company']} | {res['tariff']} ‚Äî {res['price']} —Ä—É–±")
        else:
            print(f"‚ö† –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {from_city} ‚Üí {to_city}")
            no_res = {
                "from": from_city,
                "to": to_city,
                "mode": mode,
                "weight": dimensions[0],
                "length": dimensions[1],
                "width": dimensions[2],
                "height": dimensions[3],
                "status": "no_results"
            }
            append_result_to_file(no_res)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {from_city} ‚Üí {to_city} | {e}")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    finally:
        driver.quit()


def main():
    cities = ["–ê–ª–º–∞—Ç—ã",
              "–ê–ø–∞—Ç–∏—Ç—ã",
              "–ê–ª–¥–∞–Ω",
              "–ê–Ω–∞–¥—ã—Ä—å",
              "–ê–Ω–∞–ø–∞",
              "–ê—Å—Ç–∞–Ω–∞",
              "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å",
              "–ë–∞—Ä–Ω–∞—É–ª",
              "–ë–∞—Ö—á–∏—Å–∞—Ä–∞–π",
              "–ë–∏—Ä–æ–±–∏–¥–∂–∞–Ω",
              "–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫",
              "–ë—Ä–∞—Ç—Å–∫",
              "–ë—É–¥–µ–Ω–Ω–æ–≤—Å–∫",
              "–ë—É–π–Ω–∞–∫—Å–∫",
              "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
              "–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑",
              "–í–æ–ª–∂—Å–∫–∏–π",
              "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
              "–í–æ—Ä–æ–Ω–µ–∂",
              "–ì—Ä–æ–∑–Ω—ã–π",
              "–î–æ–Ω–µ—Ü–∫",
              "–î–∑–µ—Ä–∂–∏–Ω—Å–∫–∏–π",
              "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
              "–ò–∑–±–µ—Ä–±–∞—à",
              "–ò–≤–∞–Ω–æ–≤–æ",
              "–ò–∂–µ–≤—Å–∫",
              "–ò—Ä–∫—É—Ç—Å–∫",
              "–ö–∞–∑–∞–Ω—å",
              "–ö–∞—Ä–∞–±—É–ª–∞–∫",
              "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥",
              "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
              "–ö–∞—Å–ø–∏–π—Å–∫",
              "–ö–µ–º–µ—Ä–æ–≤–æ",
              "–ö–∏—Ä–æ–≤",
              "–ö–æ–≥–∞–ª—ã–º",
              "–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ",
              "–ö–æ—Å—Ç—Ä–æ–º–∞",
              "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
              "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫",
              "–ö—É—Ä–≥–∞–Ω",
              "–ö—É—Ä—Å–∫",
              "–ö—ã–∑—ã–ª",
              "–õ–∏–ø–µ—Ü–∫",
              "–õ—É–≥–∞–Ω—Å–∫",
              "–ú–∞–≥–∞–¥–∞–Ω",
              "–ú–∞–≥–Ω–∏—Ç–æ–≥–æ—Ä—Å–∫",
              "–ú–∞–¥–∂–∞–ª–∏—Å",
              "–ú–∞–π–∫–æ–ø",
              "–ú–∞—Ä–∏—É–ø–æ–ª—å",
              "–ú–∏—Ä–Ω—ã–π",
              "–ú–æ—Å–∫–≤–∞",
              "–ú—É—Ä–º–∞–Ω—Å–∫",
              "–ù–∞–±–µ—Ä–µ–∂–Ω—ã–µ –ß–µ–ª–Ω—ã",
              "–ù–∞–¥—ã–º",
              "–ù–∞–∑—Ä–∞–Ω—å",
              "–ù–∞–ª—å—á–∏–∫",
              "–ù–∞—Ö–æ–¥–∫–∞",
              "–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫",
              "–ù–µ—Ñ—Ç–µ–∫–∞–º—Å–∫",
              "–ù–µ—Ñ—Ç–µ—é–≥–∞–Ω—Å–∫",
              "–ù–∏–∂–Ω–µ–≤–∞—Ä—Ç–æ–≤—Å–∫",
              "–ù–∏–∂–Ω–µ–∫–∞–º—Å–∫",
              "–ù–∏–∂–Ω–∏–π –ë–µ—Å—Ç—è—Ö",
              "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
              "–ù–∏–∂–Ω–∏–π –¢–∞–≥–∏–ª",
              "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫",
              "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫",
              "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫",
              "–ù–æ–≤—ã–π –£—Ä–µ–Ω–≥–æ–π",
              "–û–º—Å–∫",
              "–û—Ä–µ–Ω–±—É—Ä–≥",
              "–û—Ä—ë–ª",
              "–û—Ä—Å–∫",
              "–ü–µ–Ω–∑–∞",
              "–ü–µ—Ä–º—å",
              "–ü–µ—Ç—Ä–æ–∑–∞–≤–æ–¥—Å–∫",
              "–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫-–ö–∞–º—á–∞—Ç—Å–∫–∏–π",
              "–ü—è—Ç–∏–≥–æ—Ä—Å–∫",
              "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
              "–°–∞–º–∞—Ä–∞",
              "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
              "–°–∞—Ä–∞–Ω—Å–∫",
              "–°–∞—Ä–∞—Ç–æ–≤",
              "–°–∞–∫–∏",
              "–°–µ–≤–µ—Ä–æ–¥–≤–∏–Ω—Å–∫",
              "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å",
              "–°–∏–º—Ñ–µ—Ä–æ–ø–æ–ª—å",
              "–°–º–æ–ª–µ–Ω—Å–∫",
              "–°–æ—á–∏",
              "–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å",
              "–°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫",
              "–°—É—Ä–≥—É—Ç",
              "–°—ã–∫—Ç—ã–≤–∫–∞—Ä",
              "–¢–∞–º–±–æ–≤",
              "–¢–æ–º—Å–∫",
              "–¢–æ–ª—å—è—Ç—Ç–∏",
              "–¢—é–º–µ–Ω—å",
              "–£–ª–∞–Ω-–£–¥—ç",
              "–£–ª—å—è–Ω–æ–≤—Å–∫",
              "–£—Å—Å—É—Ä–∏–π—Å–∫",
              "–£—Å—Å—É–Ω–∞",
              "–£—Ñ–∞",
              "–£—Ö—Ç–∞",
              "–•–∞–±–∞—Ä–æ–≤—Å–∫",
              "–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫",
              "–•–∞—Å–∞–≤—é—Ä—Ç",
              "–ß–µ–±–æ–∫—Å–∞—Ä—ã",
              "–ß–µ–ª—è–±–∏–Ω—Å–∫",
              "–ß–µ—Ä–µ–ø–æ–≤–µ—Ü",
              "–ß–µ—Ä–∫–µ—Å—Å–∫",
              "–ß–∏—Ç–∞",
              "–®–∞—Ö—Ç—ã",
              "–®—ã–º–∫–µ–Ω—Ç",
              "–Ø–∫—É—Ç—Å–∫",
              "–Ø–ª—Ç–∞",
              "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
              "–ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥",
              "–î–æ–º–æ–¥–µ–¥–æ–≤–æ",
              "–ü–æ–¥–æ–ª—å—Å–∫",
              "–ë–∞–ª–∞—à–∏—Ö–∞",
              "–ö–æ—Ä–æ–ª–µ–≤",
              "–û–¥–∏–Ω—Ü–æ–≤–æ",
              "–†–µ—É—Ç–æ–≤",
              "–õ—é–±–µ—Ä—Ü—ã",
              "–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫",
              "–ú—ã—Ç–∏—â–∏",
              "–ñ—É–∫–æ–≤—Å–∫–∏–π",
              "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π",
              "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å",
              "–ñ–µ–ª–µ–∑–Ω–æ–≥–æ—Ä—Å–∫",
              "–ì–∞—Ç—á–∏–Ω–∞",
              "–¢–æ—Å–Ω–æ",
              "–í—Å–µ–≤–æ–ª–æ–∂—Å–∫",
              "–õ–∞–±—ã—Ç–Ω–∞–Ω–≥–∏",
              "–°–æ–≤–µ—Ç—Å–∫–∏–π",
              "–°–Ω–µ–∂–∏–Ω—Å–∫",
              "–û–∑–µ—Ä—Å–∫",
              "–°–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–ö—É–±–∞–Ω–∏",
              "–ï–π—Å–∫",
              "–ì–µ–ª–µ–Ω–¥–∂–∏–∫",
              ]
    sizes = [
        (10, 10, 10, 10),
        (25, 25, 25, 25),
        (50, 50, 50, 50),
        (75, 75, 75, 75),
    ]
    delivery_modes = ["—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥", "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å"]

    tasks = []
    seen_pairs = set()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä –≥–æ—Ä–æ–¥–æ–≤ –∏ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ —Ñ—É–Ω–∫—Ü–∏—é run_task
    for city1 in cities:
        for city2 in cities:
            pair_key = tuple(sorted([city1, city2]))  # –±–µ–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if pair_key in seen_pairs:
                continue
            seen_pairs.add(pair_key)

            for mode in delivery_modes:
                for size in sizes:
                    tasks.append((city1, city2, mode, size))

    # üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á
    with ProcessPoolExecutor(max_workers=4) as executor:
        executor.map(run_task, tasks)


if __name__ == "__main__":
    main()
