import os
import json
import time
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import Select, WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FROM_CITIES = {
    "–ú–æ—Å–∫–≤–∞": "mos.php",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "vlad.php",
    "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": "nov.php",
    "–Ø–∫—É—Ç—Å–∫": "yak.php"
}

PARAMS = [
    {"ves": "1", "obem": "0.1"},
    {"ves": "5", "obem": "0.15"},
    {"ves": "10", "obem": "0.2"},
    {"ves": "15", "obem": "0.3"},
    {"ves": "20", "obem": "0.5"},
    {"ves": "25", "obem": "0.8"},
    {"ves": "50", "obem": "1.0"},
    {"ves": "100", "obem": "1.5"},
    {"ves": "200", "obem": "2.0"},
    {"ves": "500", "obem": "3.0"},
    {"ves": "1000", "obem": "5.0"},
    {"ves": "1500", "obem": "8.0"}
]

RESULTS_FILE = "results.json"
PROGRESS_FILE = "progress.json"  # –§–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

def load_existing_results():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if os.path.exists(RESULTS_FILE):
        try:
            with open(RESULTS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return []
    return []

def load_progress():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    if os.path.exists(PROGRESS_FILE):
        try:
            with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_progress(progress):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(progress, f, ensure_ascii=False, indent=2)

def save_results(results):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    with open(RESULTS_FILE, "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({len(results)} –∑–∞–ø–∏—Å–µ–π)")

def save_result_incremental(result):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª –ø–æ –æ–¥–Ω–æ–º—É"""
    results = load_existing_results()
    results.append(result)
    save_results(results)

def parse_city_data(driver, wait, from_city, to_city, param, page):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã –≥–æ—Ä–æ–¥–æ–≤"""
    try:
        print(f"üîÑ {from_city} ‚Üí {to_city} | {param['ves']} –∫–≥, {param['obem']} –º¬≥")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        select_element = wait.until(EC.presence_of_element_located((By.NAME, "kuda")))
        select = Select(select_element)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        available_options = [opt.get_attribute("value") for opt in select.options]
        if to_city not in available_options:
            print(f"‚ö†Ô∏è  –ì–æ—Ä–æ–¥ {to_city} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {from_city}")
            return None

        # –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        select.select_by_value(to_city)

        # –í–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        ves_element = wait.until(EC.presence_of_element_located((By.NAME, "ves")))
        ves_element.clear()
        ves_element.send_keys(param["ves"])
        
        obem_element = driver.find_element(By.NAME, "obem")
        obem_element.clear()
        obem_element.send_keys(param["obem"])

        # –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
        if page == "vlad.php":
            submit_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "input.fordirect-param[type='submit']")))
        else:
            submit_button = wait.until(EC.element_to_be_clickable(By.ID, "knopka"))
        
        submit_button.click()

        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "td[align='center'][width='200'] b.h1")))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        price_element = driver.find_element(By.CSS_SELECTOR, "td[align='center'][width='200'] b.h1")
        price = price_element.text.strip()

        # –ê–≤–∏–∞–Ω–∞–∫–ª–∞–¥–Ω–∞—è
        awb_elements = driver.find_elements(By.CSS_SELECTOR, "td[align='center'][width='200'] span.copy b")
        awb_price = awb_elements[-1].text.strip() if awb_elements else "‚Äî"

        # –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
        all_td = driver.find_elements(By.CSS_SELECTOR, "td[align='center'][width='200']")
        delivery_days = next((td.text.strip() for td in all_td if "–¥–Ω–µ–π" in td.text), "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"   üí∞ –¶–µ–Ω–∞: {price} —Ä—É–±.")
        print(f"   ‚úàÔ∏è  –ê–≤–∏–∞–Ω–∞–∫–ª–∞–¥–Ω–∞—è: {awb_price} —Ä—É–±.")
        print(f"   ‚è± –°—Ä–æ–∫: {delivery_days}\n")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            "timestamp": datetime.now().isoformat(),
            "from": from_city,
            "to": to_city.capitalize(),
            "weight": int(param["ves"]),
            "volume": float(param["obem"]),
            "company": "–ê—ç—Ä–æ–≥—Ä—É–∑",
            "tariff": "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–∞—Ä–∏—Ñ",
            "price": price,
            "delivery": delivery_days
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {from_city} ‚Üí {to_city}: {str(e)[:100]}...\n")
        return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –ê—ç—Ä–æ–≥—Ä—É–∑...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    progress = load_progress()
    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {progress}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
    options.binary_location = "/usr/bin/chromium-browser"
    
    driver = None
    try:
        driver = webdriver.Chrome(options=options)
        driver.set_page_load_timeout(30)
        
        cities_list = list(FROM_CITIES.items())
        
        for from_index, (from_city, page) in enumerate(cities_list):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if progress.get("last_city_index", -1) > from_index:
                print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {from_city} (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")
                continue
                
            try:
                url = f"https://www.aerogruz.ru/calc/{page}"
                print(f"\nüìç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {from_city}")
                
                driver.get(url)
                wait = WebDriverWait(driver, 20)
                
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                wait.until(EC.presence_of_element_located((By.NAME, "kuda")))

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                select_element = Select(driver.find_element(By.NAME, "kuda"))
                available_to_cities = [opt.get_attribute("value") for opt in select_element.options]

                # –ò—Å–∫–ª—é—á–∞–µ–º –≥–æ—Ä–æ–¥-–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
                available_to_cities = [city for city in available_to_cities if city and city != from_city.lower()]
                print(f"üèôÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {len(available_to_cities)} —à—Ç.")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                for city_index, to_city in enumerate(available_to_cities):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                    if (progress.get("last_city_index", -1) == from_index and 
                        progress.get("last_city_dest_index", -1) > city_index):
                        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {from_city} ‚Üí {to_city}")
                        continue
                        
                    for param_index, param in enumerate(PARAMS):
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        if (progress.get("last_city_index", -1) == from_index and 
                            progress.get("last_city_dest_index", -1) == city_index and
                            progress.get("last_param_index", -1) >= param_index):
                            print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {from_city} ‚Üí {to_city} ({param['ves']}–∫–≥)")
                            continue
                            
                        try:
                            print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞: {from_city} ‚Üí {to_city}")
                            
                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–Ω–æ–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                            driver.get(url)
                            wait = WebDriverWait(driver, 20)
                            wait.until(EC.presence_of_element_located((By.NAME, "kuda")))
                            
                            result = parse_city_data(driver, wait, from_city, to_city, param, page)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
                            if result:
                                save_result_incremental(result)
                                
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            current_progress = {
                                "last_city_index": from_index,
                                "last_city_dest_index": city_index,
                                "last_param_index": param_index,
                                "last_update": datetime.now().isoformat()
                            }
                            save_progress(current_progress)
                            
                            time.sleep(3)
                            
                        except Exception as e:
                            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è {from_city} ‚Üí {to_city} ({param['ves']}–∫–≥): {str(e)}")
                            continue
                            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞ {from_city}: {str(e)}")
                continue
                
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
    finally:
        if driver:
            driver.quit()
            
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if os.path.exists(PROGRESS_FILE):
            os.remove(PROGRESS_FILE)
            
        results = load_existing_results()
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")

if __name__ == "__main__":
    main()
